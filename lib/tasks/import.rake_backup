# coding: utf-8

require 'sqlite3'
require 'kramdown'

desc "import 打卡记录"
task :import, [:filename] => :environment do    
  begin
    talker2name = {}
    username2name = {}
    activity_stat={}

    db = SQLite3::Database.open './lib/tasks/decrypted_database.db'
    db.results_as_hash = true
    db.execute('SELECT username,nickname FROM rcontact').each  do |row|
      username = row['username']
      nickname = row['nickname']
      if nickname != ''
        if username =~ /@chatroom$/
          talker2name[username] = nickname == '' ? username : nickname
        else
          username2name[username] = nickname == '' ? username : nickname
        end
      end
    end


    db.execute("select memberlist from chatroom where chatroomname='3783139122@chatroom'").each do |row|
      memberlist = row['memberlist']
      memberlist.split(/;/).each do |wxid|
        name=username2name.fetch(wxid, 'xxxx')
        member=Member.where(wxid: wxid).first_or_create 
        member.name=name
        member.save      
      end   
    end


    db.execute("SELECT msgId, createTime,talker,content FROM message where talker='3783139122@chatroom'").each do |row|
      msgId, time,talker,content = row.values_at 'msgId','createTime','talker','content'
      next unless content
     # next if(Time.now - Time.at(time/1000) > 60*60*24*14 )   
      next if content =~ /关键字/       #skip. 这个消息是群主发通告。打卡不应该包含“关键字”。
      next if content =~ /微信红包/       #skip.     
      next if content =~ /^~SEMI_XML~/  
      if content.match('#打卡')
        id=content.scan(/^(.+?):\n/)[0]? content.scan(/^(.+?):\n/)[0][0]:"chenxing_2489"         # if the id is empty then it is me
        name = talker2name.fetch talker, talker
        
 
        content.sub!(/^#{id}:\n/) {|x| "" }
        unless Workout.exists?(msgId: msgId)
          puts "#{time} #content"
          workout=Workout.new(msgId: msgId, wxid: id, name: name, time: Time.at(time/1000).strftime('%F %R'),detail: content ) 
          workout.save
          puts workout
        end        

      end
    end
  rescue => exception
    puts exception.backtrace
    raise # always reraise
  end
end


desc "Generate the html"
task :export, [:filename] => :environment do

  output =  "# Notice \n\n"
  output <<  "* 打卡请包含关键字 *#打卡*. 在群里面打卡的例子: *#打卡 跑步10公里*  \n"
  output <<  "* 统计周期为28天 \n"
  output <<  "\n"
  
  output <<  "# Activities statistics of Last 28 days (Updated on #{Time.now})  \n\n"
  output <<  "| Name |Times| \n"

  activity_stat=Member.all.inject({}) do |all, member|
       all[member]=Workout.where(wxid: member.wxid, time: (Time.now-60*60*24*28)..(Time.now+24*3600)).size
       all
       end
  activity_stat.sort_by{|k,v| v}.reverse.each do |record|    
    
    name=record[0].name
    if record[0].nick && record[0].nick.empty? == false
      name=record[0].nick
    end
    next if name=='Robot'
    output<< "|#{name} |#{record[1]} | \n "
  end

  output <<  "\n# Activities detail \n\n"
  activity_stat.sort_by{|k,v| v}.reverse.each do |record|
    member=record[0]
    next if record[1]==0 || member.name=='Robot'
    name=record[0].name
    if record[0].nick && record[0].nick.empty? == false    
      name=record[0].nick
    end
    output <<  "## #{name} \n\n"
    Workout.where(wxid: member.wxid, time: (Time.now-60*60*24*28)..(Time.now+24*3600)).each do |workout| 
      output <<  " #{workout.time} #{workout.detail} \n\n"
    end
  end

  output <<  "# Source code \n\n"
  output <<  " [https://github.com/mingoc/wechat-group-stat](https://github.com/mingoc/wechat-group-stat)"

  
  File.open('stat.html', 'w') { |file|  file.write( '<meta charset="utf-8"> <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" /> <meta http-equiv="Pragma" content="no-cache" /> <meta http-equiv="Expires" content="0" />' +  Kramdown::Document.new(output).to_html) }




  
end


